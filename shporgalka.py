"""
Функции высшего порядка:
sorted(Итерируемый объект, ключ для сортировки) - сортирует элементы по ключу
map(ключ для модификации, Итерируемый объект) - модифицирует элементы по ключу
filter(ключ для фильтрации, Итерируемый объект) - фильтрует элементы по ключу
ключ - ссылка на функцию, которая возвращает какое - то значение
Пример: 
def key(a):
    return a

"""


# Ключ для фильтрации
def key(a):
    return a < 0  # возвращает True, либо False в зависимости от того, выполняется ли условие


a = [-5, -1, 0, -1, 100, -3, -22, 3, 9, 21]
# Передаём функцию в качестве ключа. Передать её нужно обязательно без круглых скобак, потому что если передать со скобками, то функция key() просто выполнится
# Правильно
sorted_list = filter(key, a)
# Не правильно
sorted_list = filter(key(), a)
# filter(key, a) фильтрует элементы по ключу (в данном случае - отбрасывет все элементы, которые не прошли проверку в функции key)

# так выглядит итерируемый объект
print(sorted_list)
# а так выглядит просто список
print(list(sorted_list))

"""
Лямбда функции используют в задачах, где многострочные функции писать долго и неудобно.
Также они используются для сокращения кода.
Лямбда-функция это та же функция, что и обычная, только объявляется в одну строчку и обязательно что-нибудь возвращает

"""


# Известная нам обычная многострочная функция
def my_func(a, b):
    return a + b


# Такая же функция что и выше, только короче.
my_func = lambda a, b: a + b  # Лямбда-функция
# my_func в случае с лямбда функцией - это просто переменная, в которую мы помещаем ссылку на функцию. (не вызываем)
# По аналогии с обычной функцией лямбда-функцию также можно вызвать
out = my_func(2, 3) # функция вернула нам сумму чисел
print(out) #  рещальтат выполнения - 3
# ВАЖНО: в лямбда-функциях return не пишется

"""
Новые методы "split" и "join" - это методы строк
Они используются для разделения строк по символу-разделителю и для соединения строк по символу-соединителю
split метод возвращает список из строк
join метод возвращает строку
"""
# Имеется строка
a = "Мой@кот@спит@на@диване@в@гостинной"
# мы можем разделить данную строку на список по символу-разделителю, используя метод split
words_list = a.split("@") # в данном случае символ-разделитель - "@"
print(words_list) # Вывод: ["Мой", "кот", "спит", "на", "диване", "в", "гостинной"]

# также мы можем соединить список слов по символу-соединителю

sentence = " ".join(words_list)
print(sentence) # Вывод: "Мой кот спит на диване в гостинной"
# Cначала пишется строка, в которой указывается символ-соединитель, в данном случае - " ",
# далее вызывается метод join, в качесве аргумента которому передаётся список строк.